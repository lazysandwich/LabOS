#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <time.h>

#define MAX_MATRIX_SIZE 1000

int num_threads;
int matrix_size;
int filter_iterations;
double **matrix;
double **result;
int filter_size;

pthread_mutex_t lock; // Мьютекс для синхронизации потоков

void *apply_filter(void *arg) {
    int thread_id = *(int *)arg;
    int chunk_size = matrix_size / num_threads;
    int start = thread_id * chunk_size;
    int end = (thread_id == num_threads - 1) ? matrix_size : start + chunk_size;
    for (int iter = 0; iter < filter_iterations; iter++) {
        for (int i = start; i < end; i++) {
            for (int j = 0; j < matrix_size; j++) {
                double sum = 0.0;
                for (int fi = -filter_size / 2; fi <= filter_size / 2; fi++) {
                    for (int fj = -filter_size / 2; fj <= filter_size / 2; fj++) {
                        int ni = i + fi, nj = j + fj;
                        if (ni >= 0 && ni < matrix_size && nj >= 0 && nj < matrix_size) {
                            sum += matrix[ni][nj];
                        }
                    }
                }
                int size_lenght;
                int size_high;
                if (i < filter_size / 2) {
                    size_lenght = filter_size / 2 + i + 1;
                }
                else if (matrix_size - i - 1 < filter_size / 2) {
                    size_lenght = filter_size / 2 + matrix_size - i;
                }
                else {
                    size_lenght = filter_size;
                }
                if (j < filter_size / 2) {
                    size_high = filter_size / 2 + j + 1;
                }
                else if (matrix_size - j - 1 < filter_size / 2) {
                    size_high = filter_size / 2 + matrix_size - j;
                }
                else {
                    size_high = filter_size;
                }
                result[i][j] = sum / (size_lenght * size_high);
            }
        }
        pthread_mutex_lock(&lock);
        double **temp = matrix;
        matrix = result;
        result = temp;
        pthread_mutex_unlock(&lock);
    }
    return NULL;
}

void initialize_matrix() {
    matrix = malloc(matrix_size * sizeof(double *));
    result = malloc(matrix_size * sizeof(double *));
    for (int i = 0; i < matrix_size; i++) {
        matrix[i] = malloc(matrix_size * sizeof(double));
        result[i] = malloc(matrix_size * sizeof(double));
        for (int j = 0; j < matrix_size; j++) {
            matrix[i][j] = rand() % 100;
            result[i][j] = 0.0;
        }
    }
}

void free_matrix() {
    for (int i = 0; i < matrix_size; i++) {
        free(matrix[i]);
        free(result[i]);
    }
    free(matrix);
    free(result);
}

void print_matrix(double **mat, const char *title) {
    printf("%s:\n", title);
    for (int i = 0; i < matrix_size; i++) {
        for (int j = 0; j < matrix_size; j++) {
            printf("%.2f ", mat[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

int main(int argc, char *argv[]) {
    if (argc != 5) {
        printf("Использование: %s <размер_матрицы> <размер_фильтра> <итераций_фильтра> <количество_потоков>\n", argv[0]);
        return 1;
    }
    matrix_size = atoi(argv[1]);
    filter_size = atoi(argv[2]);
    if (filter_size % 2 == 0) {
        printf("размер_фильтра должен быть нечётным");
        return 1;
    }
    filter_iterations = atoi(argv[3]);
    num_threads = atoi(argv[4]);
    if (matrix_size <= 0 || filter_size <= 0 || filter_iterations <= 0 || num_threads <= 0) {
        printf("Все параметры должны быть положительными целыми числами.\n");
        return 1;
    }
    if (matrix_size > MAX_MATRIX_SIZE) {
        printf("Размер матрицы превышает максимально допустимый (%d).\n", MAX_MATRIX_SIZE);
        return 1;
    }
    initialize_matrix();
    print_matrix(matrix, "Начальная матрица");
    pthread_t threads[num_threads];
    int thread_ids[num_threads];
    pthread_mutex_init(&lock, NULL);
    clock_t start_time = clock();
    for (int i = 0; i < num_threads; i++) {
        thread_ids[i] = i;
        if (pthread_create(&threads[i], NULL, apply_filter, &thread_ids[i]) != 0) {
            perror("pthread_create");
            return 1;
        }
    }
    for (int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }
    clock_t end_time = clock();
    double time_spent = (double)(end_time - start_time) / CLOCKS_PER_SEC;
    pthread_mutex_destroy(&lock);
    print_matrix(matrix, "Фильтрованная матрица");
    printf("Время, затраченное на фильтрацию: %.6f секунд\n", time_spent);
    free_matrix();
    return 0;
}
